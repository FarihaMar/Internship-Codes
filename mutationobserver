(async () => {
  const sleep = ms => new Promise(res => setTimeout(res, ms));

  const filters = {
    sortBy: "Latest",
    datePosted: "Past week",
    contentType: "Images",
    postedBy: "People you follow",
    fromMembers: ["Rajesh Kumar"],
    fromCompanies: ["InfluXify"]
  };

  // 1. Open "All filters" panel
  document.querySelector('button[aria-label*="Show all filters"]')?.click();
  await sleep(1500);

  // 2. Apply checkbox filters (unchanged)
  async function applyCheckbox(group, option) {
    const fs = [...document.querySelectorAll('fieldset')]
      .find(f => f.innerText.includes(group));
    if (!fs) return console.warn(`‚ùå Fieldset not found: ${group}`);
    const lbl = [...fs.querySelectorAll('label')]
      .find(l => l.innerText.includes(option));
    if (lbl) {
      lbl.click();
      console.log(`‚úÖ Selected "${option}" in "${group}"`);
    } else {
      console.warn(`‚ùå Option not found: ${option} in ${group}`);
    }
    await sleep(1000);
  }

  await applyCheckbox("Sort by", filters.sortBy);
  await applyCheckbox("Date posted", filters.datePosted);
  await applyCheckbox("Content type", filters.contentType);
  await applyCheckbox("Posted by", filters.postedBy);

  // 3. Enhanced search field handler
  async function applySearchField(ariaLabel, values, triggerText) {
    if (triggerText) {
      const triggerBtn = [...document.querySelectorAll('button')]
        .find(b => b.innerText.trim() === triggerText);
      if (triggerBtn) {
        triggerBtn.click();
        console.log(`üü¢ Clicked trigger: "${triggerText}"`);
        await sleep(1000);
      }
    }

    for (const value of values) {
      let input = document.querySelector(`input[aria-label="${ariaLabel}"]`);
      if (!input) {
        console.warn(`‚ùå Input with aria-label "${ariaLabel}" not found`);
        continue;
      }

      // Focus and type the value
      input.focus();
      input.value = '';
      input.dispatchEvent(new Event('input', { bubbles: true }));
      await sleep(300);
      
      // Type character by character (more reliable)
      for (const char of value) {
        input.value += char;
        input.dispatchEvent(new Event('input', { bubbles: true }));
        await sleep(100);
      }
      console.log(`‚å®Ô∏è Typed: "${value}"`);
      
      // Wait for suggestions with multiple approaches
      let suggestionSelected = false;
      const maxAttempts = 5;
      
      for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        console.log(`Attempt ${attempt} to select "${value}"`);
        
        // Strategy 1: Direct click if visible
        const suggestions = [...document.querySelectorAll('[role="option"], [role="listbox"] li, .autocomplete-item')];
        const exactMatch = suggestions.find(s => 
          s.innerText.trim().toLowerCase() === value.toLowerCase()
        );
        
        if (exactMatch) {
          exactMatch.click();
          console.log(`‚úÖ Selected exact match: "${value}"`);
          suggestionSelected = true;
          break;
        } else if (suggestions.length > 0) {
          suggestions[0].click();
          console.log(`‚ö†Ô∏è Selected first suggestion for "${value}"`);
          suggestionSelected = true;
          break;
        }
        
        // Strategy 2: Keyboard navigation (down arrow + enter)
        if (!suggestionSelected && attempt > 2) {
          console.log('Trying keyboard navigation...');
          input.dispatchEvent(new KeyboardEvent('keydown', { key: 'ArrowDown', bubbles: true }));
          await sleep(300);
          input.dispatchEvent(new KeyboardEvent('keydown', { key: 'Enter', bubbles: true }));
          await sleep(500);
          
          // Verify if selection was made
          const chips = document.querySelectorAll('.pill-item, .search-chip');
          if ([...chips].some(chip => chip.textContent.includes(value))) {
            console.log(`‚úÖ Keyboard-selected: "${value}"`);
            suggestionSelected = true;
            break;
          }
        }
        
        // Strategy 3: Scroll and retry
        window.scrollBy(0, 100);
        await sleep(800);
      }
      
      if (!suggestionSelected) {
        console.warn(`‚ùå Failed to select suggestion for "${value}" after ${maxAttempts} attempts`);
      }
      
      await sleep(1000);
    }
  }

  // 4. Apply From Members and From Companies
  await applySearchField("Add a person's name", filters.fromMembers, "Add a person's name");
  await applySearchField("Add a company's name", filters.fromCompanies, "Add a company's name");

  // 5. Verify selections
  const verifySelections = () => {
    const selectedItems = [...document.querySelectorAll('.pill-item, .search-chip, .selected-item')]
      .map(el => el.textContent.trim());
    
    filters.fromMembers.forEach(name => {
      const isSelected = selectedItems.some(item => item.includes(name));
      console.log(isSelected ? `‚úÖ Verified member: ${name}` : `‚ùå Missing member: ${name}`);
    });
    
    filters.fromCompanies.forEach(name => {
      const isSelected = selectedItems.some(item => item.includes(name));
      console.log(isSelected ? `‚úÖ Verified company: ${name}` : `‚ùå Missing company: ${name}`);
    });
  };
  
  verifySelections();

  // 6. Click Show Results
  const showResults = async () => {
    const showBtn = [...document.querySelectorAll('button')]
      .find(b => /show\s*results/i.test(b.innerText));
    
    if (showBtn) {
      showBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });
      await sleep(500);
      showBtn.click();
      console.log("üöÄ Clicked 'Show results'");
    } else {
      console.warn("‚ùå 'Show results' button not found");
    }
  };
  
  await showResults();
})();
